#pragma GCC diagnostic ignored "-Wunused-function" push

#define UTF8_LENGTH_CHAR(character, value) { \
	char first = *(character); \
 \
	if (!(first & 0x80)) \
		value = 1; \
	else if ((first & 0xE0) == 0xC0) \
		value = 2; \
	else if ((first & 0xF0) == 0xE0) \
		value = 3; \
  	else if ((first & 0xF8) == 0xF0) \
		value = 4; \
	else if ((first & 0xFC) == 0xF8) \
		value = 5; \
	else if ((first & 0xFE) == 0xFC) \
		value = 6; \
	else \
		value = 0; \
}

static int utf8_length_char(const char *character) {
	int value;
	UTF8_LENGTH_CHAR(character, value);
	return value;
}

static int utf8_value(const char *character, int maximumLength, int *_length) {
	if (!maximumLength) return 0;
	int length;
	char first = *character; 

	if (!(first & 0x80)) 
		length = 1; 
	else if ((first & 0xE0) == 0xC0) 
		length = 2; 
	else if ((first & 0xF0) == 0xE0) 
		length = 3; 
	else if ((first & 0xF8) == 0xF0) 
		length = 4; 
	else if ((first & 0xFC) == 0xF8) 
		length = 5; 
	else if ((first & 0xFE) == 0xFC) 
		length = 6; 
	else 
		length = 0; 

	if (maximumLength < length) return 0;
	if (_length) *_length = length;

	if (length == 1)
		return (int)first;
	else if (length == 2)
		return (((int)first & 0x1F) << 6) | (((int)character[1]) & 0x3F);
	else if (length == 3)
		return (((int)first & 0xF) << 12) | ((((int)character[1]) & 0x3F) << 6) | (((int)character[2]) & 0x3F);
	else if (length == 4)
		return (((int)first & 0x7) << 18) | ((((int)character[1]) & 0x3F) << 12) | ((((int)character[2]) & 0x3F) << 6) |
		(((int)character[3]) & 0x3F);
	else if (length == 5)
		return (((int)first & 0x3) << 24) | ((((int)character[1]) & 0x3F) << 18) | ((((int)character[2]) & 0x3F) << 12) |
		((((int)character[4]) & 0x3F) << 6) | (((int)character[5]) & 0x3F);
	else if (length == 6)
		return (((int)first & 0x1) << 30) | ((((int)character[1]) & 0x3F) << 24) | ((((int)character[2]) & 0x3F) << 18) |
		((((int)character[4]) & 0x3F) << 12) | ((((int)character[5]) & 0x3F) << 6) | (((int)character[6]) & 0x3F);
	else
		return 0; // Invalid code point
}

static int utf8_value(const char *character) {
	int length;
	UTF8_LENGTH_CHAR(character, length);

	char first = *character;

	int value;

	if (length == 1)
		value = (int)first;
	else if (length == 2)
		value = (((int)first & 0x1F) << 6) | (((int)character[1]) & 0x3F);
	else if (length == 3)
		value = (((int)first & 0xF) << 12) | ((((int)character[1]) & 0x3F) << 6) | (((int)character[2]) & 0x3F);
	else if (length == 4)
		value = (((int)first & 0x7) << 18) | ((((int)character[1]) & 0x3F) << 12) | ((((int)character[2]) & 0x3F) << 6) |
		(((int)character[3]) & 0x3F);
	else if (length == 5)
		value = (((int)first & 0x3) << 24) | ((((int)character[1]) & 0x3F) << 18) | ((((int)character[2]) & 0x3F) << 12) |
		((((int)character[4]) & 0x3F) << 6) | (((int)character[5]) & 0x3F);
	else if (length == 6)
		value = (((int)first & 0x1) << 30) | ((((int)character[1]) & 0x3F) << 24) | ((((int)character[2]) & 0x3F) << 18) |
		((((int)character[4]) & 0x3F) << 12) | ((((int)character[5]) & 0x3F) << 6) | (((int)character[6]) & 0x3F);
	else
		value = 0; // Invalid code point

	return value;
}

static int utf8_encode(int value, char *buffer) {
	if (value < (1 << 7)) {
		if (buffer) {
			buffer[0] = value & 0x7F;
		}

		return 1;
	} else if (value < (1 << 11)) {
		if (buffer) {
			buffer[0] = 0xC0 | ((value >> 6) & 0x1F);
			buffer[1] = 0x80 | (value & 0x3F);
		}

		return 2;
	} else if (value < (1 << 16)) {
		if (buffer) {
			buffer[0] = 0xE0 | ((value >> 12) & 0xF);
			buffer[1] = 0x80 | ((value >> 6) & 0x3F);
			buffer[2] = 0x80 | (value & 0x3F);
		}

		return 3;
	} else if (value < (1 << 21)) {
		if (buffer) {
			buffer[0] = 0xF0 | ((value >> 18) & 0x7);
			buffer[1] = 0x80 | ((value >> 12) & 0x3F);
			buffer[2] = 0x80 | ((value >> 6) & 0x3F);
			buffer[3] = 0x80 | (value & 0x3F);
		}

		return 4;
	}

	return 0; // Cannot encode character
}

static char *utf8_advance(const char *string) {
	int length;
	UTF8_LENGTH_CHAR(string, length);

	if (!length) // Invalid code point 
		return NULL;

	return (char *) string + length;
}

static char *utf8_retreat(const char *string) {
	// Keep going backwards until we find a non continuation character
	do string--;
	while (((*string) & 0xC0) == 0x80);
	return (char *) string;
}

static int utf8_length(char *string, int max_bytes) {
	if (!string)
		return 0;
	if (!(*string))
		return 0;

	if (!max_bytes) return 0;

	int length = 0;
	char *limit = string + max_bytes;

	while ((max_bytes == -1 || string < limit) && *string) {
		if (!string) // Invalid code point
			return -1;

		length++;
		string = utf8_advance(string);
	}

	return length;
}

#pragma GCC diagnostic pop

#ifndef SHARED_DEFINITIONS_ONLY

// --------------------------------- Line breaking algorithm.

#ifndef KERNEL

static const uint16_t breakGroupsL2Lookup[544] = {
	0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0007, 0x0008, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x000E, 0x000F, 0x0010, 0x0010, 0x0010, 0x0010, 0x0011, 
	0x0012, 0x0013, 0x0014, 0x0015, 0x0016, 0x0010, 0x0017, 0x0010, 0x0018, 0x0010, 0x0010, 0x0010, 0x0010, 0x0019, 0x0007, 0x0007, 
	0x001A, 0x001B, 0x0010, 0x0010, 0x0010, 0x0010, 0x001C, 0x001D, 0x0010, 0x0010, 0x001E, 0x001F, 0x0020, 0x0021, 0x0022, 0x0023, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0024, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 
	0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0024, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0025, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
	0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
};

static const uint16_t breakGroupsL2[38][64] = {
	{
		0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0007, 0x0006, 0x0008, 0x0008, 0x0009, 0x000A, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x000B, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x000C, 0x000D, 0x000E, 0x000F, 
		0x0010, 0x0006, 0x0011, 0x0012, 0x0006, 0x0006, 0x0013, 0x0014, 0x0015, 0x0016, 0x0017, 0x0006, 0x0006, 0x0018, 0x0019, 0x001A, 
	},
	{
		0x001B, 0x001C, 0x001D, 0x0006, 0x0006, 0x0006, 0x001E, 0x001F, 0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027, 
		0x0024, 0x0025, 0x0028, 0x0029, 0x0024, 0x0025, 0x002A, 0x002B, 0x0024, 0x0025, 0x002C, 0x002D, 0x002E, 0x002F, 0x0030, 0x0031, 
		0x0032, 0x002F, 0x0033, 0x0034, 0x0035, 0x0025, 0x0033, 0x002D, 0x0020, 0x0036, 0x0037, 0x0038, 0x0024, 0x0006, 0x0039, 0x003A, 
		0x0006, 0x003B, 0x003C, 0x0006, 0x0006, 0x0006, 0x003D, 0x0006, 0x003E, 0x003F, 0x0006, 0x0040, 0x0041, 0x0042, 0x0043, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0044, 0x0006, 0x003D, 0x0006, 0x0006, 0x0006, 0x0045, 0x0045, 0x0045, 0x0046, 0x0046, 0x0047, 0x0048, 0x0048, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0049, 0x004A, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x004B, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x004C, 0x0006, 0x0006, 0x004D, 0x004E, 0x004F, 0x0050, 0x0050, 0x0006, 0x0006, 0x0051, 0x0019, 
	},
	{
		0x0052, 0x0006, 0x0006, 0x0006, 0x0053, 0x0054, 0x0006, 0x0006, 0x0006, 0x0055, 0x0056, 0x0006, 0x0006, 0x0006, 0x003D, 0x0006, 
		0x0057, 0x0006, 0x0006, 0x0058, 0x0059, 0x0016, 0x005A, 0x0006, 0x0032, 0x005B, 0x005C, 0x005D, 0x005E, 0x005F, 0x0006, 0x0060, 
		0x0006, 0x0061, 0x0059, 0x0062, 0x0006, 0x0006, 0x0063, 0x0064, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0008, 0x0065, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0066, 
	},
	{
		0x0067, 0x0068, 0x0069, 0x006A, 0x006B, 0x006C, 0x006D, 0x006E, 0x006F, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0070, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0071, 0x0072, 0x0073, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0074, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0075, 0x0076, 0x0006, 0x0077, 0x0006, 0x0078, 0x0079, 0x007A, 0x007B, 0x0006, 0x007C, 0x007D, 0x0006, 0x0006, 0x007E, 0x007F, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0080, 0x0006, 0x0081, 0x0082, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0083, 0x0006, 0x0006, 0x0006, 0x0084, 0x0006, 0x0006, 0x0006, 0x0008, 
		0x0085, 0x0086, 0x0087, 0x0006, 0x0088, 0x0089, 0x0089, 0x008A, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x008B, 0x008C, 
	},
	{
		0x008D, 0x008E, 0x008F, 0x0090, 0x0091, 0x0092, 0x0090, 0x0093, 0x0094, 0x0095, 0x0089, 0x0089, 0x0096, 0x0089, 0x0089, 0x0097, 
		0x0098, 0x0089, 0x0099, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0006, 0x0006, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
	},
	{
		0x009A, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x009B, 0x0089, 0x009C, 0x0062, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x009D, 0x0019, 0x0006, 0x009E, 0x002F, 0x0006, 0x0006, 0x009F, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x00A0, 0x00A1, 0x0006, 0x00A2, 0x00A3, 0x005B, 0x00A4, 0x00A5, 0x0019, 0x00A6, 0x00A7, 0x00A8, 0x0020, 0x001E, 0x00A9, 0x003D, 
		0x0006, 0x00AA, 0x00AB, 0x0006, 0x0006, 0x0006, 0x0006, 0x00AC, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00AD, 
		0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 
	},
	{
		0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 
		0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 
		0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 
		0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 
	},
	{
		0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 
		0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 
		0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 
	},
	{
		0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 
		0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 
		0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 
		0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 
	},
	{
		0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 
		0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 
		0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 
		0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 
	},
	{
		0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 
		0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 
		0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 
		0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00AE, 0x00AF, 0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B5, 0x00B6, 0x00B7, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x00B8, 0x00B9, 0x00BA, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00BB, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00BC, 
		0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x0006, 0x0006, 0x0006, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x0098, 0x00C7, 0x00C8, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00C9, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00CA, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x005A, 0x0006, 0x0006, 0x0006, 0x00CB, 0x00CC, 0x0006, 0x00CD, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0019, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x00CE, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00CC, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x00CF, 0x00D0, 0x00D1, 0x0006, 0x0006, 0x0006, 0x0006, 0x00D2, 0x0006, 0x00D3, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00D4, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00D5, 0x0006, 0x0006, 0x0006, 0x0006, 0x0018, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x005E, 0x00D6, 0x00D7, 0x00D8, 0x005E, 0x00D9, 0x00DA, 0x003D, 0x005E, 0x00DB, 0x00DC, 0x00DD, 0x005E, 0x001E, 0x00DE, 0x0006, 
		0x0006, 0x00DF, 0x0006, 0x0006, 0x0006, 0x00E0, 0x0058, 0x00E1, 0x0020, 0x0036, 0x0026, 0x00E2, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x00E3, 0x00E4, 0x0006, 0x0006, 0x0016, 0x00E5, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00E6, 0x00E7, 0x0006, 
		0x0006, 0x0016, 0x00E8, 0x00E9, 0x0006, 0x00EA, 0x0019, 0x0006, 0x0006, 0x00EB, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x00EC, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0019, 0x0006, 0x00ED, 0x00EE, 0x0006, 0x0006, 0x0006, 0x00EF, 0x00F0, 
		0x00F1, 0x00F2, 0x00F3, 0x0006, 0x00F4, 0x00F5, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x00F6, 0x00F7, 0x00F8, 0x00F9, 0x00FA, 0x0006, 0x0006, 0x0006, 0x00FB, 0x00FC, 0x0006, 0x00FD, 0x0019, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00FE, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x00FF, 0x0100, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0101, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0102, 0x0006, 0x0103, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0104, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0105, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0106, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0107, 0x0006, 0x0006, 0x0006, 0x0108, 0x0006, 0x0109, 0x010A, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x010B, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x010C, 0x0008, 0x010D, 0x0006, 0x0006, 0x010E, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x010F, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0110, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0098, 0x0006, 0x0111, 0x0112, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0113, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0114, 0x0020, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0115, 0x0116, 0x0117, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0118, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0119, 0x011A, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0008, 0x011B, 0x0008, 0x011C, 0x011D, 0x011E, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x011F, 0x0120, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0121, 0x0019, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0122, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0121, 0x0006, 0x0006, 0x0006, 0x0123, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0124, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0125, 0x0006, 0x0006, 0x0125, 0x0006, 0x0126, 0x0089, 0x0127, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0128, 0x0129, 0x012A, 0x012B, 
		0x0089, 0x0089, 0x012C, 0x012D, 0x012E, 0x012F, 0x0089, 0x0089, 0x0130, 0x0131, 0x0132, 0x0133, 0x0134, 0x0089, 0x0135, 0x0136, 
		0x0089, 0x0089, 0x0137, 0x0138, 0x0089, 0x0139, 0x013A, 0x0089, 0x0006, 0x0006, 0x0006, 0x013B, 0x0006, 0x0006, 0x013C, 0x0089, 
	},
	{
		0x013D, 0x0006, 0x013E, 0x0006, 0x013F, 0x0140, 0x0089, 0x0089, 0x0141, 0x0142, 0x0089, 0x0089, 0x0089, 0x0143, 0x0144, 0x0089, 
		0x0006, 0x0006, 0x013B, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x003D, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0145, 
	},
	{
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 
		0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0145, 
	},
	{
		0x0146, 0x0008, 0x0008, 0x0008, 0x0006, 0x0006, 0x0006, 0x0006, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0147, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
		0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
	},
};

static const uint8_t breakGroupsL1[328][32] = {
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 37, 34, 34, 36, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 41,  6,  3, 12,  9, 10, 12,  3,  0,  2, 12,  9,  8, 16,  8,  7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,  8,  8, 12, 12, 12,  6, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  9,  2, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0, 17,  1, 12, 21, },
	{ 21, 21, 21, 21, 21, 38, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{  4,  0, 10,  9,  9,  9, 12, 12, 12, 12, 12,  3, 12, 17, 12, 12, 10,  9, 12, 12, 18, 12, 12, 12, 12, 12, 12,  3, 12, 12, 12,  0, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 18, 12, 12, 12, 18, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  4, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  4,  4,  4,  4, },
	{  4,  4,  4, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 12, },
	{ 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12,  8, 17, 12, 12, 12, 12,  9, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 21, },
	{ 12, 21, 21, 12, 21, 21,  6, 21, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, },
	{ 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10,  8,  8, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  6, 21, 12,  6,  6, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  6, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 21, },
	{ 21, 21, 21, 21, 21, 12, 12, 21, 21, 12, 21, 21, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12,  8,  6, 12, 12, 12, 21,  9,  9, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 12, 21, 21, 21, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 17, 17, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 21, 21, },
	{ 21, 21, 21, 21, 21, 12, 12, 21, 21, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 10, 10, 12, 12, 12, 12, 12, 10, 12,  9, 12, 12, 21, 12, },
	{ 21, 21, 21, 12, 12, 12, 12, 21, 21, 12, 12, 21, 21, 21, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 21, 21, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12,  9, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 12, 12, 21, 21, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, },
	{ 21, 21, 21, 12, 12, 12, 21, 21, 21, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12,  9, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 12, 21, 21, 21, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 18, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 21, 21, 21, 18, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 21, 21, },
	{ 21, 21, 21, 21, 21, 12, 21, 21, 21, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 12, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  9, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17, 17, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 18, 18, 18, 18, 12, 18, 18,  4, 18, 18, 17,  4,  6,  6,  6,  6,  6,  4, 12,  6, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 21, 12, 21, 12, 21,  0,  1,  0,  1, 21, 21, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, },
	{ 21, 21, 21, 21, 21, 17, 21, 21, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 17, 17, },
	{ 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, 18, 17, 18, 12, 12, 12, 12, 12,  4,  4, 12, 12, 12, 12, 12, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, },
	{ 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, },
	{ 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, },
	{ 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, },
	{ 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17,  5, 12, 17, 12, 17,  9, 12, 12, 12, 12, },
	{ 12, 12,  6,  6, 17, 17, 18, 12,  6,  6, 12, 21, 21, 21,  4, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, },
	{ 12, 12, 12, 12,  6,  6, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17, 17, 12, 17, 17, 17, },
	{ 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 17, 17, 17, 17, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 21, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, 12, 12, },
	{ 17, 17, 17, 17, 17, 17, 17,  4, 17, 17, 17, 20, 21, 31, 21, 21, 17,  4, 17, 17, 19, 12, 12, 12,  3,  3,  0,  3,  3,  3,  0,  3, },
	{ 12, 12, 12, 12, 15, 15, 15, 17, 34, 34, 21, 21, 21, 21, 21,  4, 10, 10, 10, 10, 10, 10, 10, 10, 12,  3,  3, 12,  5,  5, 12, 12, },
	{ 12, 12, 12, 12,  8,  0,  1,  5,  5,  5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 17, 17, 17, 17, 12, 17, 17, 17, },
	{ 22, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{  9,  9,  9,  9,  9,  9,  9, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10,  9,  9,  9,  9, 10,  9,  9, 10,  9, },
	{  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 10, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  9, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  9,  9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12,  0,  1,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 12, 12, 14, 12, 14, 14, 14, 29, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 14, 12, 14, 14, 14, 12, 14, 14, 12, 12, 12, 14, 14, 12, 12, 14, 12, 12, 14, },
	{ 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 14, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 12, 14, 14, 29, 14, 12, 12, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 12, 12, 12, 14, 14, 29, 29, 29, 29, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  3,  3,  3,  3,  3, },
	{  3, 12,  6,  6, 14, 12, 12, 12,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1,  0,  1, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12,  6, 17, 17, 17, 12,  6, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, },
	{  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 17, 17, 17, 17, 17, 17, 17, 17, 12, 17,  0, 17, 12, 12,  3,  3, 12, 12, },
	{  3,  3,  0,  1,  0,  1,  0,  1,  0,  1, 17, 17, 17, 17,  6, 12, 17, 17, 12, 17, 17, 12, 12, 12, 12, 12, 19, 19, 17, 17, 17, 12, },
	{ 17, 17,  0, 17, 17, 17, 17, 17, 17, 17, 17, 12, 17, 12, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, },
	{ 17,  1,  1, 14, 14,  5, 14, 14,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1, 14, 14,  0,  1,  0,  1,  0,  1,  0,  1,  5,  0,  1,  1, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 21, 21, 21, 21, 21, 21, 14, 14, 14, 14, 14, 21, 14, 14, 14, 14, 14,  5,  5, 14, 14, 14, },
	{ 12,  5, 14,  5, 14,  5, 14,  5, 14,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14,  5, 14,  5, 14,  5, 14, 14, 14, 14, 14, 14,  5, 14, 14, 14, 14, 14, 14,  5,  5, 12, 12, 21, 21,  5,  5,  5,  5, 14, },
	{  5,  5, 14,  5, 14,  5, 14,  5, 14,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14,  5, 14,  5, 14,  5, 14, 14, 14, 14, 14, 14,  5, 14, 14, 14, 14, 14, 14,  5,  5, 14, 14, 14, 14,  5,  5,  5,  5, 14, },
	{ 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17,  6, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 12, 12, 12, 21, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, 18,  6,  6, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18, 12, 12, 21, },
	{ 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 12, 12, 12, },
	{ 21, 12, 12, 12, 12, 12, 12, 17, 17, 17, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 17, 17, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 17, 17, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 17, 21, 21, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, },
	{ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, },
	{ 24, 24, 24, 24, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, },
	{ 26, 26, 26, 26, 26, 26, 26, 12, 12, 12, 12, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, },
	{ 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 21, 13, },
	{ 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 13, 13, 13, 13, 13, 12, 13, 12, },
	{ 13, 13, 12, 13, 13, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  1,  0, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  8,  1,  1,  8,  8,  6,  6,  0,  1, 15, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 14, 14, 14, 14, 14,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0, },
	{  1,  0,  1,  0,  1, 14, 14,  0,  1, 14, 14, 14, 14, 14, 14, 14,  1, 14,  1, 12,  5,  5,  6,  6, 14,  0,  1,  0,  1,  0,  1, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 12, 14,  9, 10, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 22, },
	{ 12,  6, 14, 14,  9, 10, 14, 14,  0,  1, 14, 14,  1, 14,  1, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  5,  5, 14, 14, 14,  6, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  0, 14,  1, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  0, 14,  1, 14,  0, },
	{  1,  1,  0,  1,  1,  5, 14,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  5,  5, },
	{ 12, 12, 14, 14, 14, 14, 14, 14, 12, 12, 14, 14, 14, 14, 14, 14, 12, 12, 14, 14, 14, 14, 14, 14, 12, 12, 14, 14, 14, 12, 12, 12, },
	{ 10,  9, 14, 14, 14,  9,  9, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 32, 12, 12, 12, },
	{ 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 21, 21, 21, 12, 21, 21, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 12, 12, 12, 12, 21, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, },
	{ 12, 12, 12, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 17, 17, },
	{ 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, },
	{ 17, 17, 17, 17, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 18, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 12, 12, 12, 12, 17, 17, 12, 17, 21, 21, 21, 21, 12, 21, 21, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 18, 12, 17, 17, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 17, 12, 17, 17, 12, 21, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 17, 17, 17, 17, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17, 17, 12, 12, 21, 12, },
	{ 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 18, 17, 17,  6,  6, 12, 12, 12, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 12, 12, 12, 12, 21, 21, 12, 12, },
	{ 21, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 17, 17, 17, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 12, 21, 21, 12, 12, 21, 21, 21, 21, 12, },
	{ 21, 12, 21, 21, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 21, 21, 21, 21, 21, 21, },
	{ 21, 12, 18, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 18, },
	{ 12, 17, 17, 17, 17, 18, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 17, 17, 17, 12, 18, 18, },
	{ 18, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 12, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 18,  6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 12, 12, 12, 21, 12, 21, 21, 12, 21, },
	{ 21, 21, 21, 21, 21, 21, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 12, 21, 21, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10, },
	{ 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  0,  0,  1,  1,  1, 12, 12, },
	{ 12, 12,  1, 12, 12, 12,  0,  1,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1,  1, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  4,  4,  4,  4,  4,  4,  4,  0,  1, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,  1, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 17, 17, 17, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 17, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{  5,  5,  5,  5,  4, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  5,  5,  5, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12,  5,  5,  5,  5, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 17, },
	{ 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, },
	{ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 21, 21, 21, 21, 21, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 21, 12, 12, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, },
	{ 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 12, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 21, 21, 21, 21, 21, },
	{ 21, 21, 12, 21, 21, 12, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 21, 21, 21, 21, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12,  9, },
	{ 12, 12, 12, 12, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12,  0,  0, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 10, 12, 12, 12, 10, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, },
	{ 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 14, 14, 14, 14, 14, 12, 14, 14, 14, },
	{ 14, 14, 29, 29, 29, 14, 14, 29, 14, 14, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 30, 30, 30, 30, 30, },
	{ 14, 14, 29, 29, 14, 14, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 29, 14, 14, 14, },
	{ 14, 29, 29, 29, 14, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 29, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 14, 12, 14, 12, 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 12, 14, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 14, 14, 14, 14, 29, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 29, 29, 29, 14, 14, 14, 29, 29, 29, 29, 29, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  3,  3,  3,  5,  5,  5, 12, 12, 12, 12, },
	{ 14, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, },
	{ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 29, 29, 29, },
	{ 14, 14, 14, 14, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 29, 29, 29, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 14, 29, 29, 14, 29, 14, 14, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29, 29, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, },
	{ 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 12, 12, },
	{ 12, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
	{ 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, },
};

enum BreakClass : uint8_t {
	// Handled by the pair table.

	BREAK_OP,
	BREAK_CL,
	BREAK_CP,
	BREAK_QU,
	BREAK_GL,
	BREAK_NS,
	BREAK_EX,
	BREAK_SY,
	BREAK_IS,
	BREAK_PR,
	BREAK_PO,
	BREAK_NU,
	BREAK_AL,
	BREAK_HL,
	BREAK_ID,
	BREAK_IN,
	BREAK_HY,
	BREAK_BA,
	BREAK_BB,
	BREAK_B2,
	BREAK_ZW,
	BREAK_CM,
	BREAK_WJ,
	BREAK_H2,
	BREAK_H3,
	BREAK_JL,
	BREAK_JV,
	BREAK_JT,
	BREAK_RI,
	BREAK_EB,
	BREAK_EM,
	BREAK_ZWJ,
	BREAK_CB,

	// Not handled by the pair table.

	BREAK_AI,
	BREAK_BK,
	BREAK_CJ,
	BREAK_CR,
	BREAK_LF,
	BREAK_NL,
	BREAK_SA,
	BREAK_SG,
	BREAK_SP,
	BREAK_XX,
};

enum BreakAction : uint8_t {
	BREAK_DIRECT,
	BREAK_INDIRECT,
	BREAK_INDIRECT_COMBINING,
	BREAK_PROHIBITED,
	BREAK_PROHIBITED_COMBINING,
};

#define BD ((BreakAction) 0)
#define BI ((BreakAction) 1)
#define BC ((BreakAction) 2)
#define PB ((BreakAction) 3)
#define PC ((BreakAction) 4)

static const BreakAction breakPairTable[34][34] = {
	{ PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PC, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, }, 
	{ BD, PB, PB, BI, BI, PB, PB, PB, PB, BI, BI, BD, BD, BD, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, PB, PB, PB, PB, BI, BI, BI, BI, BI, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ PB, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, BC, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, BC, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BI, BD, BI, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BI, BI, BI, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BI, BI, BI, BI, BD, BI, BI, BD, BD, PB, BC, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BI, BI, BI, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BD, BI, PB, PB, PB, BD, BD, BI, BD, BD, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BD, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, BC, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BD, BI, BI, BD, PB, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, PB, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, BC, PB, BI, BI, BI, BI, BI, BI, BI, BI, BI, BI, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BI, BI, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BI, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BI, BI, BI, BI, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BI, BI, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BI, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BD, BD, BD, BD, BD, BD, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BI, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BI, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BI, PB, PB, PB, BD, BI, BD, BD, BD, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BI, PB, PB, BI, BI, BI, PB, PB, PB, BI, BI, BI, BI, BI, BD, BI, BI, BI, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ BD, PB, PB, BI, BI, BD, PB, PB, PB, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, BD, PB, BC, PB, BD, BD, BD, BD, BD, BD, BD, BD, BI, BD, PB, }, 
	{ PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, PB, }, 
};

#undef BD
#undef BI
#undef BC
#undef PB
#undef PC

struct Break {
	uintptr_t position;
	bool forced;
};

struct BreakState {
	const char *string;
	size_t bytes;
	uintptr_t position;
	BreakClass currentClass, nextClass;
	bool rule8a, rule21a, started, error;
	uint8_t rule30a;

	void Jump(uintptr_t newPosition) {
		rule8a = rule21a = false;
		rule30a = 0;
		currentClass = nextClass = (BreakClass) 33; // Prohibited breaks.
		position = newPosition;
	}

	BreakClass GetNextClass() {
		int length = 0, character;

		if (position != bytes) {
			character = utf8_value(string + position, bytes - position, &length);

			if (!length) {
				error = true;
			}

			position += length;
		} else {
			character = 0;
		}

		return (BreakClass) breakGroupsL1[breakGroupsL2[breakGroupsL2Lookup[character >> 11]][(character >> 5) & 63]][character & 31];
	}

	BreakClass MapFirst(BreakClass breakClass) {
		if (breakClass == BREAK_LF || breakClass == BREAK_NL) return BREAK_BK;
		if (breakClass == BREAK_SP) return BREAK_WJ;
		return breakClass;
	}

	Break Next() {
		if (!started) {
			started = true;
			nextClass = GetNextClass();
			if (error) return {};
			currentClass = MapFirst(nextClass);
		}

		while (position < bytes) {
			uintptr_t previousPosition = position;

			BreakClass lastClass = nextClass;
			nextClass = GetNextClass();
			if (error) return {};

			if (currentClass == BREAK_BK) { 
				currentClass = MapFirst(nextClass);
				return { previousPosition, true };
			}

			bool optionalBreak = false;

			if (nextClass == BREAK_BK || nextClass == BREAK_LF || nextClass == BREAK_NL) {
				currentClass = BREAK_BK;
			} else if (nextClass != BREAK_SP) {
				BreakAction action = breakPairTable[currentClass][nextClass];

				if (action == BREAK_DIRECT) optionalBreak = true;
				else if (action == BREAK_INDIRECT || action == BREAK_INDIRECT_COMBINING) optionalBreak = lastClass == BREAK_SP;
				if ((action == BREAK_INDIRECT_COMBINING || action == BREAK_PROHIBITED_COMBINING) && lastClass != BREAK_SP) goto next;

				if (rule8a) optionalBreak = false;
				if (rule21a && (currentClass == BREAK_HY || currentClass == BREAK_BA)) optionalBreak = rule21a = false;
				else rule21a = currentClass == BREAK_HL;

				if (currentClass == BREAK_RI) {
					rule30a++;

					if (rule30a == 2 && nextClass == BREAK_RI) {
						optionalBreak = true, rule30a = 0;
					}
				} else rule30a = 0;

				currentClass = nextClass;
			}

			next:;
			rule8a = nextClass == BREAK_ZWJ;
			if (optionalBreak) return { previousPosition, bytes == previousPosition };
		}

		return { bytes, true };
	}
};

#endif

// --------------------------------- Validation.

const uint64_t utf8ValidationStateTable[] = {
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL, 0xDB0AA4DB6DB6D80ULL,
	0xDB0AA4636306036ULL, 0xDB0AA4636306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL, 0xDB0AA4306306036ULL,
	0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL, 0xDB0AA4DB6DB6D86ULL,
	0xDB0AA4DB6DB6D98ULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL,
	0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL,
	0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL,
	0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL, 0xDB0AA4DB6DB6D8CULL,
	0xDB0AA4DB6DB6D9EULL, 0xDB0AA4DB6DB6D92ULL, 0xDB0AA4DB6DB6D92ULL, 0xDB0AA4DB6DB6D92ULL,
	0xDB0AA4DB6DB6D92ULL, 0xDB0AA4DB6DB6D92ULL, 0xDB0AA4DB6DB6D92ULL, 0xDB0AA4DB6DB6D92ULL,
	0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL,
	0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL, 0xDB0AA4DB6DB6DB6ULL,
};

#if 0
void BuildTable() {
	for (uintptr_t c = 0; c < 256; c++) {
		uint64_t row = 0;

		for (uintptr_t i = 0; i < 10; i++) {
			uintptr_t state = i;

			if (state == 0) {
				if (!(c & 0x80)) state = 0;
				else if (c == 0xC0 || c == 0xC1) state = 9; // Overlong ASCII.
				else if (c == 0xE0) state = 4; // Maybe overlong...
				else if (c == 0xF0) state = 5; // Maybe overlong...
				else if ((c & 0xE0) == 0xC0) state = 1;
				else if ((c & 0xF0) == 0xE0) state = 2;
				else if ((c & 0xF8) == 0xF0) state = 3;
				else state = 9;
			} else if (state == 1 || state == 2 || state == 3) {
				if ((c & 0xC0) != 0x80) state = 9;
				else state--;
			} else if (state == 5) {
				if ((c & 0xC0) != 0x80) state = 9;
				else if (c == 0x80 || c == 0x81) state = 4; // Maybe overlong...
				else state = 2;
			} else if (state == 4) {
				if ((c & 0xC0) != 0x80) state = 9;
				else if (c == 0x80 || c == 0x81) state = 9; // Overlong ASCII.
				else state = 1;
			}

			row |= (state * 6) << (i * 6);
		}

		utf8ValidationStateTable[c] = row;
		printf("0x%lX,\n", row);
	}
}
#endif

bool UTF8IsValid(const uint8_t *input, const uint8_t *end) {
	// NOTE Does not check for surrogate characters or overlong sequences of non-ASCII characters.
	// NOTE See https://gist.github.com/pervognsen/218ea17743e1442e59bb60d29b1aa725 for an explanation of how this works.

	uint64_t state = 0;

	while (input != end) {
		state = utf8ValidationStateTable[*input++] >> (state & 63);
	}

	return (state & 63) == 0;
}

bool EsUTF8IsValid(const char *input, ptrdiff_t bytes) {
	if (bytes == -1) bytes = EsCStringLength(input);
	return UTF8IsValid((const uint8_t *) input, (const uint8_t *) input + bytes);
}

#endif
